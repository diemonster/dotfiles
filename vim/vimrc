let s:darwin = has('mac')
call plug#begin('~/.vim/plugged')
Plug 'fatih/vim-go'
Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
Plug 'git@github.com:kien/rainbow_parentheses.vim.git'
Plug 'git@github.com:scrooloose/syntastic.git'
Plug 'git@github.com:wookiehangover/jshint.vim.git'
Plug 'https://github.com/ConradIrwin/vim-bracketed-paste.git'
Plug 'junegunn/fzf',        { 'do': 'yes \| ./install' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-emoji'
Plug 'airblade/vim-gitgutter'
Plug 'dgryski/vim-godef'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'flowtype/vim-flow'
Plug 'plasticboy/vim-markdown'
Plug 'marijnh/tern_for_vim'
Plug 'tpope/vim-fugitive'
Plug 'markcornick/vim-vagrant'
Plug 'klen/python-mode'
Plug 'ekalinin/Dockerfile.vim'
Plug 'fatih/molokai'
Plug 'mhinz/vim-startify'
Plug 'Valloric/YouCompleteMe'
Plug 'mbbill/undotree'
Plug 'tpope/vim-commentary'
Plug 'easymotion/vim-easymotion'
Plug 'haya14busa/incsearch.vim'
Plug 'kristijanhusak/vim-hybrid-material'
Plug 'ryanoasis/vim-devicons'
Plug 'vim-scripts/bats.vim'
Plug 'hashivim/vim-terraform'
Plug 'hashivim/vim-consul'
if s:darwin
  Plug 'zerowidth/vim-copy-as-rtf', { 'on': 'CopyRTF'          }
endif
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'chriskempson/base16-vim'
Plug 'w0ng/vim-hybrid'
call plug#end()
"
syntax on
set encoding=utf-8
set nocompatible
set tabstop=4
set expandtab
set softtabstop=4
set shiftwidth=4
set bs=2
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildmenu
set laststatus=2
set background=dark
set number
set clipboard=unnamed
set shell=/bin/sh
set title
set lazyredraw
set incsearch
set showcmd
set undofile " maintain undo history between sessions
set undodir=~/.undodir/ " directory must exist 
nnoremap Q <nop>
" remove line numbers on unfocused window
au WinLeave * set nonu
au FocusLost * set nonu
au WinEnter * set nu
au FocusGained * set nu
" jk remap to esc sequence
inoremap jk <esc>
filetype indent plugin on
" python specific
let g:pydiction_location = '/Users/bivers/.vim/bundle/pydiction/complete-dict'
let g:pymode_folding = 0
let g:pymode_indent = 1
let g:pymode_lint = 1
let g:pymode_lint_on_fly = 0
let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']
let g:pymode_rope_completion = 1
" ----------------------------------------------------------------------------
" Color/Theme related 
" ----------------------------------------------------------------------------
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
let g:hybrid_use_iTerm_colors = 1
colorscheme material-dark
" ----------------------------------------------------------------------------
" Markdown Config
" ----------------------------------------------------------------------------
let g:vim_markdown_folding_disabled=1
" ----------------------------------------------------------------------------
" F Key Mappings
" ----------------------------------------------------------------------------
nmap <F1> :GoDescribe<CR>
nmap <F3> :NERDTreeToggle<CR>
nnoremap <F4> :UndotreeToggle<CR>
nmap <F5> :TagbarToggle<CR>
nmap <F6> :SyntasticToggleMode<CR>
nmap <F7> :SyntasticCheck<CR>
nnoremap <F11> :set spell spelllang=en_us<CR>
nnoremap <F12> :set relativenumber!<CR>
" ----------------------------------------------------------------------------
" golang autodetect config
" ----------------------------------------------------------------------------
augroup filetypedetect_go
    let g:go_fmt_fail_silently = 1
    let g:go_fmt_command = "gofmt"
    let g:go_auto_type_info = 0
    let g:go_highlight_functions = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:godef_same_file_in_same_window=1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_interfaces = 1
    let g:go_highlight_build_constraints = 1
    autocmd FileType go nmap gd <Plug>(go-def)
    autocmd FileType go nmap <Leader>t <Plug>(go-test)
    autocmd FileType go nmap <leader>r <Plug>(go-run)
    autocmd FileType go nmap <leader>b <Plug>(go-build)
    au FileType go nmap <Leader>e <Plug>(go-rename)
augroup END
let $GOROOT="/usr/local/Cellar/go/1.7.3/libexec"
" ----------------------------------------------------------------------------
" syntastic config
" ----------------------------------------------------------------------------
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_go_checkers = ['go', 'gofmt', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:syntastic_loc_list_height = 5
let g:syntastic_check_on_wq = 0
let g:syntastic_error_symbol = emoji#for('poop')
let g:syntastic_warning_symbol = emoji#for('sob')
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set completeopt-=preview
" ----------------------------------------------------------------------------
" experimental mouse mode ;)
" ----------------------------------------------------------------------------
set mouse=a
if !has('nvim')
  set ttymouse=xterm2
endif
" ----------------------------------------------------------------------------
" vim-fugitive
" ----------------------------------------------------------------------------
nmap     <Leader>g :Gstatus<CR>gg<c-n>
noremap <Leader>d :Gdiff<CR>
" ----------------------------------------------------------------------------
" Git Gutter emojis
" ----------------------------------------------------------------------------
  let g:gitgutter_sign_added = emoji#for('small_blue_diamond')
  let g:gitgutter_sign_modified = emoji#for('small_orange_diamond')
  let g:gitgutter_sign_removed = emoji#for('small_red_triangle')
  let g:gitgutter_sign_modified_removed = emoji#for('collision')
" ----------------------------------------------------------------------------
" Airline Config
" ----------------------------------------------------------------------------
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#branch#enabled = 1
" let g:airline_theme = "hybridline"
" let g:airline_theme = "base16_ocean"
" ----------------------------------------------------------------------------
" Macvim Config
" ----------------------------------------------------------------------------
if has("gui_running")
  " let g:hybrid_use_Xresources = 1
  colorscheme material-dark
  " let g:airline_theme = "hybridline"
endif
" ----------------------------------------------------------------------------
" FZF
" ----------------------------------------------------------------------------
if has('nvim')
  let $FZF_DEFAULT_OPTS .= ' --inline-info'
endif

nnoremap <silent> <expr> <Leader><Leader> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":Files\<cr>"
nnoremap <silent> <Leader>C        :Colors<CR>
nnoremap <silent> <Leader><Enter>  :Buffers<CR>
nnoremap <silent> <Leader>ag       :Ag <C-R><C-W><CR>

inoremap <expr> <c-x><c-t> fzf#complete('tmuxwords.rb --all-but-current --scroll 500 --min 5')
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" ----------------------------------------------------------------------------
" ack.vim
" ----------------------------------------------------------------------------
if executable('ag')
let &grepprg = 'ag --nogroup --nocolor --column'
else
let &grepprg = 'grep -rn $* *'
endif
command! -nargs=1 -bar Grep execute 'silent! grep! <q-args>' | redraw! | copen
" ----------------------------------------------------------------------------
" hound.vim
" ----------------------------------------------------------------------------
let g:hound_base_url = "http://locahost"
let g:hound_port = "6080"
" ----------------------------------------------------------------------------
" incsearch.vim
" ----------------------------------------------------------------------------
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
" ----------------------------------------------------------------------------
" easymotion.vim 
" ----------------------------------------------------------------------------
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
" map <Leader><Leader> <Plug>(easymotion-prefix)
let g:EasyMotion_startofline = 0
" ----------------------------------------------------------------------------
" YouCompleteMe
" ----------------------------------------------------------------------------
let g:ycm_autoclose_preview_window_after_completion = 0
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_path_to_python_interpreter = '/usr/local/bin/python'
" ----------------------------------------------------------------------------
" UndoTree.vim
" ----------------------------------------------------------------------------
let g:undotree_SetFocusWhenToggle = 1
let g:undotree_HighlightChangedText = 1
" ----------------------------------------------------------------------------
" vim jsx
" ----------------------------------------------------------------------------
let g:jsx_ext_required = 0
let g:javascript_plugin_flow = 1
" ----------------------------------------------------------------------------
" Rainbow Parentheses
" ----------------------------------------------------------------------------
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
au Syntax * RainbowParenthesesLoadBraces
" ----------------------------------------------------------------------------
" Autoread
" ----------------------------------------------------------------------------
" Save whenever switching windows or leaving vim. This is useful when running
" the tests inside vim without having to save all files first.
au FocusLost,WinLeave * :silent! wa

" Trigger autoread when changing buffers or coming back to vim.
au FocusGained,BufEnter * :silent! !
" ----------------------------------------------------------------------------
" Startify
" ----------------------------------------------------------------------------
let g:startify_list_order = ['bookmarks', 'files', 'sessions']
let g:startify_bookmarks = [
    \ '~/Development/go/src/gitlab.imshealth.com/xfra',
    \ '~/Development/go/src/gitlab.imshealth.com/xfra/l0-cli',
    \ '~/Development/go/src/gitlab.imshealth.com/xfra/layer0',
    \ ]
let g:startify_custom_header = [
    \ '      ___                       ___           ___           ___           ___                    ___                       ___      ',
    \ '     /\  \          ___        /\__\         /\  \         /\  \         /\  \                  /\__\          ___        /\__\     ',
    \ '    /::\  \        /\  \      /:/  /        /::\  \       /::\  \       /::\  \                /:/  /         /\  \      /::|  |    ',
    \ '   /:/\:\  \       \:\  \    /:/  /        /:/\:\  \     /:/\:\  \     /:/\ \  \              /:/  /          \:\  \    /:|:|  |    ',
    \ '  /::\~\:\__\      /::\__\  /:/__/  ___   /::\~\:\  \   /::\~\:\  \   _\:\~\ \  \            /:/__/  ___      /::\__\  /:/|:|__|__  ', 
    \ ' /:/\:\ \:|__|  __/:/\/__/  |:|  | /\__\ /:/\:\ \:\__\ /:/\:\ \:\__\ /\ \:\ \ \__\           |:|  | /\__\  __/:/\/__/ /:/ |::::\__\ ',
    \ ' \:\~\:\/:/  / /\/:/  /     |:|  |/:/  / \:\~\:\ \/__/ \/_|::\/:/  / \:\ \:\ \/__/           |:|  |/:/  / /\/:/  /    \/__/~~/:/  / ',
    \ '  \:\ \::/  /  \::/__/      |:|__/:/  /   \:\ \:\__\      |:|::/  /   \:\ \:\__\             |:|__/:/  /  \::/__/           /:/  /  ', 
    \ '   \:\/:/  /    \:\__\       \::::/__/     \:\ \/__/      |:|\/__/     \:\/:/  /              \::::/__/    \:\__\          /:/  /   ', 
    \ '    \::/__/      \/__/        ~~~~          \:\__\        |:|  |        \::/  /                ~~~~         \/__/         /:/  /    ', 
    \ '     ~~                                      \/__/         \|__|         \/__/                                            \/__/     ', 
    \ '',
    \ ' ===================================================================================================================================',
    \ '',
    \ ]
