"
" Very little of this will work outside of a Mac
"
let s:darwin = has('mac')
set rtp+=~/.vim/bundle/Vundle.vim
" Trying Vundle
call vundle#begin()
Plugin 'Valloric/YouCompleteMe'
call vundle#end()
" https://github.com/junegunn/vim-plug
call plug#begin('~/.vim/plugged')
" Plug 'bling/vim-airline'
Plug 'git@github.com:kien/rainbow_parentheses.vim.git'
Plug 'git@github.com:scrooloose/syntastic.git'
Plug 'git@github.com:Lokaltog/vim-easymotion.git'
Plug 'git@github.com:junegunn/seoul256.vim'
Plug 'git@github.com:wookiehangover/jshint.vim.git'
Plug 'git@github.com:Shougo/vimshell.vim.git'
Plug 'git@github.com:Shougo/vimproc.vim.git'
Plug 'https://github.com/jnurmine/Zenburn.git'
Plug 'https://github.com/ConradIrwin/vim-bracketed-paste.git'
Plug 'junegunn/fzf',        { 'do': 'yes \| ./install' }
Plug 'junegunn/vim-emoji'
Plug 'airblade/vim-gitgutter'
Plug 'saltstack/salt-vim'
Plug 'dgryski/vim-godef'
Plug 'sjl/gundo.vim'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'pangloss/vim-javascript'
Plug 'plasticboy/vim-markdown'
Plug 'marijnh/tern_for_vim'
Plug 'tpope/vim-fugitive'
Plug 'markcornick/vim-vagrant'
Plug 'rizzatti/dash.vim'
Plug 'tomasr/molokai'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'klen/python-mode'
Plug 'ekalinin/Dockerfile.vim'
Plug 'gregsexton/gitv', { 'on': 'Gitv' }
if s:darwin
  Plug 'zerowidth/vim-copy-as-rtf', { 'on': 'CopyRTF'          }
endif
call plug#end()
" Start Powerline
source /usr/local/lib/python2.7/site-packages/powerline/bindings/vim/plugin/powerline.vim
" 
execute pathogen#infect()
execute pathogen#helptags()
syntax on
set encoding=utf-8
set nocompatible
set tabstop=4
set expandtab
set softtabstop=4
set shiftwidth=4
set bs=2
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set laststatus=2
set background=dark
set number
set clipboard=unnamed
set shell=/bin/sh
set title
set completeopt-=preview
" jk remap to esc sequence
inoremap jk <esc>
filetype indent plugin on
" python specific
let g:pydiction_location = '/Users/bivers/.vim/bundle/pydiction/complete-dict'
let g:pymode_folding = 0
let g:pymode_indent = 1
let g:pymode_lint = 1
let g:pymode_lint_on_fly = 0
let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']
let g:pymode_rope_completion = 1
" 
colorscheme solarized
let g:powerline_pycmd='py'
let g:powerline_pyeval='pyeval'
let g:powerline_colorscheme='solarizedDarkLC'
let g:vim_markdown_folding_disabled=1
" disable Ex mode
nnoremap Q <nop>
" go customizations
let g:go_fmt_fail_silently = 1
let g:go_fmt_command = "gofmt"
" disabled due to weird characters on screen
let g:go_auto_type_info = 0
" F key mappings
nmap <F1> :GoDescribe<CR>
nmap <F2> :Dash<CR>
nmap <F3> :NERDTreeToggle<CR>
nnoremap <F4> :GundoToggle<CR>
nmap <F5> :TagbarToggle<CR>
nnoremap <F10> :set spell spelllang=en_us<CR>
nnoremap <F11> :set paste!<CR>
nnoremap <F12> :set relativenumber!<CR>
" ----------------------------------------------------------------------------
" <F8> | Color scheme selector
" ----------------------------------------------------------------------------
function! s:rotate_colors()
  if !exists('s:colors_list')
    let s:colors_list =
    \ sort(map(
    \   filter(split(globpath(&rtp, "colors/*.vim"), "\n"), 'v:val !~ "^/usr/"'),
    \   "substitute(fnamemodify(v:val, ':t'), '\\..\\{-}$', '', '')"))
  endif
  if !exists('s:colors_index')
    let s:colors_index = index(s:colors_list, g:colors_name)
  endif
  let s:colors_index = (s:colors_index + 1) % len(s:colors_list)
  let name = s:colors_list[s:colors_index]
  execute 'colorscheme' name
  redraw
  echo name
endfunction
nnoremap <F8> :call <SID>rotate_colors()<cr>

" seoul theme customization
let g:seoul256_background = 236

" ----------------------------------------------------------------------------
" golang autodetect config
" ----------------------------------------------------------------------------
augroup filetypedetect_go
    let g:go_highlight_functions = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:godef_same_file_in_same_window=1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_build_constraints = 1
    autocmd FileType go nmap gd <Plug>(go-def)
    autocmd FileType go nmap <Leader>s <Plug>(go-def-split)
    autocmd FileType go nmap <Leader>v <Plug>(go-def-vertical)
    autocmd FileType go nmap <Leader>t <Plug>(go-def-tab)

    autocmd FileType go nmap <Leader>i <Plug>(go-info)

    autocmd FileType go nmap <leader>r <Plug>(go-run)
    autocmd FileType go nmap <leader>b <Plug>(go-build)
    let g:go_bin_path = "/Users/bivers/Development/go/bin"
augroup END
" ----------------------------------------------------------------------------
" Macvim Specific
" ----------------------------------------------------------------------------
set guifont=Essential\PragmataPro:h14
if has("gui_macvim")
    let g:fzf_launcher = "iterm2-launcher %s"
endif
" ----------------------------------------------------------------------------
" syntastic config
" ----------------------------------------------------------------------------
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_check_on_wq = 0
" ----------------------------------------------------------------------------
" experimental mouse mode ;)
" ----------------------------------------------------------------------------
set mouse=a
set ttymouse=xterm2

" ----------------------------------------------------------------------------
" vim-fugitive
" ----------------------------------------------------------------------------
nmap     <Leader>g :Gstatus<CR>gg<c-n>
noremap <Leader>d :Gdiff<CR>
" Git Gutter emojis
silent! if emoji#available()
  let g:gitgutter_sign_added = emoji#for('small_blue_diamond')
  let g:gitgutter_sign_modified = emoji#for('small_orange_diamond')
  let g:gitgutter_sign_removed = emoji#for('small_red_triangle')
  let g:gitgutter_sign_modified_removed = emoji#for('collision')
endif

" ----------------------------------------------------------------------------
" Airline Config
" ----------------------------------------------------------------------------
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
" let g:airline_theme = 'solarized'
let g:airline_powerline_fonts = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#branch#enabled = 1
" ----------------------------------------------------------------------------
" Select buffer
" ----------------------------------------------------------------------------
function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! s:bufopen(e)
  execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

nnoremap <silent> <Leader><Enter> :call fzf#run({
\   'source':  reverse(<sid>buflist()),
\   'sink':    function('<sid>bufopen'),
\   'options': '+m',
\   'down':    len(<sid>buflist()) + 2
\ })<CR>
" ----------------------------------------------------------------------------
" Buffer search
" ----------------------------------------------------------------------------
function! s:line_handler(l)
  let keys = split(a:l, ':\t')
  exec 'buf ' . keys[0]
  exec keys[1]
  normal! ^zz
endfunction

function! s:buffer_lines()
  let res = []
  for b in filter(range(1, bufnr('$')), 'buflisted(v:val)')
    call extend(res, map(getbufline(b,0,"$"), 'b . ":\t" . (v:key + 1) . ":\t" . v:val '))
  endfor
  return res
endfunction

command! FZFLines call fzf#run({
\   'source':  <sid>buffer_lines(),
\   'sink':    function('<sid>line_handler'),
\   'options': '--extended --nth=3..',
\   'down':    '60%'
\})

" ----------------------------------------------------------------------------
" Locate
" ----------------------------------------------------------------------------
command! -nargs=1 Locate call fzf#run(
      \ {'source': 'locate <q-args>', 'sink': 'e', 'options': '-m'})

command! FZFTag if !empty(tagfiles()) | call fzf#run({
\   'source': "sed '/^\\!/d;s/\t.*//' " . join(tagfiles()) . ' | uniq',
\   'sink':   'tag',
\ }) | else | echo 'No tags' | endif
" ----------------------------------------------------------------------------
" ag search
" ----------------------------------------------------------------------------
command! -nargs=1 Ag call fzf#run({
            \'source': Arghandler(<f-args>),
            \'sink' : function('AgHandler'),
            \'options' : '-m'
            \})

function! AgHandler(l)
    let keys = split(a:l,':')
    execute 'tabe +' . keys[-2] . ' ' . escape(keys[-1], ' ')
endfunction 

function! Arghandler(l)
    return "ag -i " . a:l . " | sed 's@\\(.[^:]*\\):\\(.[^:]*\\):\\(.*\\)@\\3:\\2:\\1@' "
endfunction
" ----------------------------------------------------------------------------
" YouCompleteMe
" ----------------------------------------------------------------------------
let g:ycm_autoclose_preview_window_after_completion = 0
let g:ycm_add_preview_to_completeopt = 0
